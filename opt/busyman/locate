#!/usr/bin/env python3
# copyrights Visaroy
# usage: locate -i <img> [-a action] [-option value] [--option=value]
# <img>     image file name (eg. smash_logo.png)
# <action>  circle, move, click
# options:
#   -V  -verbose
#   --offx=value       - offset x
#   --offy=value       - offset y
# actions:
#   circle              - draw random circle around the located element
#   move                - just move mouse to the middle of element
#   click               - left click on the middle of located element
#   right_bottom_corner - move mouse to the right bottom corner of element [todo]
#   [TODO]  calculate right bottom corner
#   left_bottom_corner    -
#   right_bottom_corner -1-1  - (xy)1px offset

from __future__ import print_function
import pyautogui, time, sys, math, random, os, getopt, numpy, imutils, cv2, inspect, yaml
from time import sleep
from config import *
pyautogui.FAILSAFE = False # disables the fail-safe
global verbose
#offx = 0
#offy = 0

#old_stdout = sys.stdout
#sys.stderr = open(os.devnull, 'w')

def options(argv):
    img = '' # image to find
    action = '' # action to do
    mouse_start = '' # action to do
    offx = 0 # offset x
    offy = 0 # offset y
    verbose = ''
    try:
        opts, args = getopt.getopt(argv,"hVi:a:m:X:Y:",["help","verbose","img=","action=","mouse-start=","offx=","offy="])
    except getopt.GetoptError:
        print ('usage: locate -i <img> -a <action> [-offx=+x] [-offy=+y]')
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
#        if opt in ("-h", "--help")
            print ('\033[1;32m usage: locate -i <img> -a <action> [-option]\n -hV\033[1;0m')
            sys.exit()
        elif opt in ("-V", "--verbose"):
            verbose = "true"
        elif opt in ("-i", "--img"):
            img = arg
        elif opt in ("-a", "--action"):
            action = arg
        elif opt in ("-m", "--mouse-start"):
            mouse_start = arg
        elif opt in ("-X", "--offx"):
            offx = int(arg)
        elif opt in ("-Y", "--offy"):
            offy = int(arg)
    if verbose == "true":
        print (info, "action to do:", yellow, action, "..mouse starts from:", mouse_start)
    return verbose, img, action, mouse_start, offx, offy

# options(sys.argv[1:])
# list of images to find on the screen
# list = [img_path+'fb_logo_01.png', img_path+'fb_logo_02.png', img_path+'800x600-ch75%-button-English(US).png']
# read values from options and set as globals
verbose, img, action, mouse_start, offx, offy = options(sys.argv[1:])
if verbose != None:
    verbose = "false"
alfa = 6
beta = 12
theta = 24
r = random.randint(10,30)

def move_mouse (x,y):
    if verbose == "true":
        print (func_name, (inspect.currentframe().f_code.co_name))
    pyautogui.moveTo(x, y, 0.5, pyautogui.easeOutQuad)

def mouse_circle (element_x, element_y):
    for i in range(0, 18):
        x = round(element_x+r*math.cos(float(i)*beta))
        y = round(element_y+r*math.sin(float(i)*beta))
        ixy = i+x+y
        if sys.version_info[0] < 3:
            print (x,"\b",y),
#            sys.stdout.flush()
        else:
            positionStr = ' move to x: ' + str(x).rjust(4) + ' y: ' + str(y).rjust(4)
            print(positionStr, end='')
            print('\b' * len(positionStr), end='', flush=True)
#            print (x,"\b",y,end=" ")
#            print('\b' * len(positionStr), end='', flush=True)
#            sys.stdout.flush()
        pyautogui.moveTo(x, y, 0.1)

def move_random (x, y):
    if verbose == "true":
        print (func_name, (inspect.currentframe().f_code.co_name))
    for i in range(0, 4):
        r = random.randint(5,33)
        pyautogui.moveTo(r^2, r*10, 1, pyautogui.easeOutQuad)
        mouse_circle(100+r, 100+r)

def check_file ():
    if verbose == "true":
        print (func_name, (inspect.currentframe().f_code.co_name))
    try:
        f = open(img_path+img)
        if verbose == "true":
            print (ok, "file exists:", img_path+img)
    except IOError:
        if verbose == "true":
            print (nok, "file not exists:", img_path+img)
        sys.exit(2)
#    finally:
#        f.close()

def find_element ():
    if verbose == "true":
        print (func_name, (inspect.currentframe().f_code.co_name))
    try:
        if verbose == "true":
            print (info, "try to locate element on the screen:",img_path+img)
        element = pyautogui.locateOnScreen(img_path+img, confidence=0.9)
#        sys.stdout = open(os.devnull, 'w') # avoid print messages from this bellow..
        element
#        sys.stdout = old_stdout
        element_x, element_y = pyautogui.center(element)
        if offx != 0:
            print ("offset offx=",offx)
            element_x = element_x + offx
            print ("element_x=",element_x)
        if offy != 0:
            print ("offset offy=",offy)
            element_y = element_y + offy
        print (success,"found element:",img,element,"center:","x=",element_x,"y=",element_y)
        print (yellow, "[", action, "] ", "\b", end='')
    except:
        if verbose == "true":
            print (result, "cannot locate element:", img_path+img)
        sys.exit(1)

    if action == "circle":
        if element != None:
            pyautogui.moveTo(element_x+r, element_y+r, 0.2, pyautogui.easeInQuad)
            mouse_circle(element_x, element_y)

    elif action == "move":
        pyautogui.moveTo(element_x, element_y, 0.5, pyautogui.easeOutQuad)

    elif action == "click":
        pyautogui.moveTo(element_x, element_y, 0.5, pyautogui.easeOutQuad)
        pyautogui.click(element_x, element_y) # mouse click

def mouse_start_position():
    if mouse_start == 100:
        move_mouse(100,100)

try:
    mouse_start_position()
    check_file()
    find_element()
    if verbose != "true":
        print (ok, "done:", img_path+img)
#    sys.stdout.write("\n")
    sys.exit(0)
except KeyboardInterrupt:
    print('\n')
