#!/usr/bin/env python
import pyautogui, time, sys, math, random, os, getopt, numpy, imutils, cv2
from time import sleep
pyautogui.FAILSAFE = False # disables the fail-safe
script_dir = os.path.dirname(__file__)
#rel_path = "img/"
rel_path = "fb/img/"
img_path = os.path.join(script_dir, rel_path)

def check_file ():
    try:
        f = open(img)
        print "\033[1;32m file exists...\033[1;0m"
    except IOError:
        print ("\033[1;31m File not exists...\033[1;0m")
    finally:
        f.close()

def options(argv):
    img = '' # image to find
    action = '' # action to do
    try:
        opts, args = getopt.getopt(argv,"hi:a:",["img=","action="])
    except getopt.GetoptError:
        print 'usage: locate -i <img> -a <action>'
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            print '\033[1;32m usage: locate -i <img> -a <action>\033[1;0m'
            sys.exit()
        elif opt in ("-i", "--img"):
            img = arg
        elif opt in ("-a", "--action"):
            action = arg
    return img, action

# options(sys.argv[1:])
# list of images to find on the screen
# list = [img_path+'fb_logo_01.png', img_path+'fb_logo_02.png', img_path+'800x600-ch75%-button-English(US).png']
# read values from options and set as globals
img, action = options(sys.argv[1:])
alfa = 6
beta = 12
theta = 24

def find_element ():
#    try:
    print "\033[1;35m image:\033[1;0m",img_path+img
#    print "\033[1;35m image:\033[1;0m",img
    element = pyautogui.locateOnScreen(img_path+img, confidence=0.9)
#    element = pyautogui.locateOnScreen(img, confidence=0.9)
    element
    element_x, element_y = pyautogui.center(element)
    print element_x, element_y

#    except:
#        print "\033[1;35m can't locate element....\033[1;0m"

    if action == "circle":
        print 'find_element: Image to find:\033[1;32m', img, '\033[1;0m'
        print 'find_element: Action to do:\033[1;33m', action, '\033[1;0m'
        print(element)
        if element != None:
            print "\033[1;32m ...found: %r element \033[1;33m...what todo?\033[1;0m" % img
            print "pyautogui.center coordinates:", element_x, element_y
    #            pyautogui.moveTo(element_x, element_y, 0.5, pyautogui.easeOutQuad)
            r = random.randint(10,30)
            pyautogui.moveTo(element_x+r, element_y+r, 0.5, pyautogui.easeInQuad)
            for i in range(0, 18):
                x = round(element_x+r*math.cos(float(i)*beta))
                y = round(element_y+r*math.sin(float(i)*beta))
                ixy = i+x+y
                print "step i:%r" %i, "radius r:",r, "x:",x, "y:",y
                pyautogui.moveTo(x, y, 0.1)

        else:
            sys.stdout.write("\033[1;31m") # red print
            print "element %r not found ... move random" % img
            sys.stdout.write("\033[1;0m")
            pyautogui.moveTo(679, 14, 1, pyautogui.easeOutQuad)
            pyautogui.moveTo(579, 34, 0.3, pyautogui.easeOutQuad)
            pyautogui.moveTo(425, 77, 1, pyautogui.easeOutQuad)
            pyautogui.moveTo(491, 167, 1, pyautogui.easeOutQuad)
    #            pyautogui.click(458, 77) # mouse click
            pyautogui.moveTo(679, 14, 0.3, pyautogui.easeOutQuad)
            sys.stdout.write("\033[1;32m") # green print

    elif action == "move":
        pyautogui.moveTo(element_x, element_y, 0.5, pyautogui.easeOutQuad)

    elif action == "click":
        pyautogui.moveTo(element_x, element_y, 0.5, pyautogui.easeOutQuad)
        pyautogui.click(element_x, element_y) # mouse click

find_element()
