#!/bin/bash
set -x
SCRIPT=fb-walking-around
LOGFILE=/var/log/busy4me.log
source /opt/busy4me/busy-functions # global functions
source /opt/busy4me/fb/fb-config # fb variables from there

if [[ "$1" == "--debug" ]]; then
  exec &> >(tee -ia $LOGFILE)
  exec 2>&1
fi
echo "DISPLAY=$DISPLAY"
# export DISPLAY=:0
#screen_name="xterm-"$DISPLAY
#screen_task="/opt/busy4me/xterm.sh --screen fb-walking-around"$DISPLAY
#screen -S $screen_name -X kill # kill screen on this display
#screen -dmS $screen_name $screen_task

logline() {
    while IFS= read -r line; do
        echo "$(date +%F' '%T) $USER $SCRIPT - $line" | tee -a $LOGFILE
    done
}
echoinfo 'login =' $login | logline
echoinfo 'login_string =' $login_string | logline
echoinfo 'Use database:' $user_db | logline
move_mouse

fb_chat_detect_activity () {
  screen -S fb-chat-detect-activity -X kill
  screen -S fb-chat-detect-activity$DISPLAY -X kill
}

windows_uneeded_close () {
  echofunc "${FUNCNAME[0]}"
  echo -e '.. ... ... ... .... .... ... ..\e[104m\e[7m Start screen windows-uneeded-close  \e[0m ...'
  screen -S windows-uneeded-close -X kill
  screen -S windows-uneeded-close$DISPLAY -X kill
  sleep 1
  screen -dmS windows-uneeded-close$DISPLAY '/opt/busy4me/windows-uneeded-close.sh'
}

windows_check () {
  echofunc "${FUNCNAME[0]}"
  /bin/bash /opt/busy4me/windows-check.sh
}

move_mouse_01 () {
  echofunc "${FUNCNAME[0]}"
  echo -e '... ... ... ... ... \e[44m Start move mouse  \e[0m ...'
  chose=$((1 + RANDOM % 2))
  case "$chose" in
    1)
      echo -e "\e[32m ...... \e[92m \e[5m Start screen mouse-move-01...\e[0m" | logline
      screen -S mouse-move-01 -X kill
      screen -dmS mouse-move-01$DISPLAY '/opt/busy4me/fb/mouse-move-01.py'
    ;;
    2)
      echo -e "\e[32m ...... \e[92m \e[5m Start screen mouse-move-02...\e[0m" | logline
      screen -S mouse-move-02 -X kill
      screen -S mouse-move-02$DISPLAY -X kill
      screen -dmS mouse-move-02$DISPLAY '/opt/busy4me/fb/mouse-move-02.py'
    ;;
    *)
      echo -e "\e[32m ...... \e[92m \e[5m Start screen mouse-move-01...\e[0m" | logline
      screen -S mouse-move-01 -X kill
      screen -S mouse-move-01$DISPLAY -X kill
    ;;
  esac
}

hide_window () {
  echofunc "${FUNCNAME[0]}"
  echoinfo "hide window..."
  scrot /tmp/scrot.png
  feh --bg-scale /tmp/scrot.jpg
  transset -a 0 # hide window for a moment
  xdotool key --delay 200 Ctrl+a Ctrl+c Ctrl+Shift+a
  transset -a 0.9
  feh --bg-scale /opt/busy/images/wall_black_with_vertical_logo.jpg
}

page_probe () {
  echofunc "${FUNCNAME[0]}"
  mark00="Leave This Page"
  mark01="temporarily restricted"
  mark011="been temporarily blocked"
  mark012="You're Tmporarily Blocked"
  mark02="follow"
  mark03="o"
  mark04="Accept All" # fb question: Accept cookies from Facebook...  echo -e "\e[35m page probe after Active click..............................\e[0m" | logline
	xclip -selection clipboard /opt/busy/files/blank
  hide_window
  echoinfo "screenshoot... and check what is on the screen"
	scrot_local
	clip=$(xclip -out -selection clipboard ) 	# check what is on the screen
	# save clipboard to file
	echo -e '\e[33m' $clip '\e[0m'> /opt/busy/clipboard/$(date +%Y-%m-%d--%H-%M-%S)-clip
		case "$clip" in
		*$mark00*)
			echo -e '\e[95m \e[5m Something unfinished... leave this page... \e[0m' | logline
			xdotool key --delay 500 Ctrl+f && xdotool type "$mark00" && xdotool key --delay 800 Escape Return
		;;
		*$mark01*)
			for i in {1..20}
			do
        zenity --info --title="temporarily restricted" --text="I see: $mark01 \n \n OK, slow down..." --timeout 5
				echo -e '\e[95m \e[5m $mark01 ...PAUSE... \e[0m' | logline
        sleep 5
			done
		;;
    *$mark011*|*$mark012*)
			for i in {1..100}
			do
        zenity --info --title="temporarily restricted" --text="I see: $mark011 \n \n OK, slow down..." --timeout 5
				echo -e '\e[95m \e[5m $mark011 ...PAUSE... \e[0m' | logline
        sleep 5
			done
		;;
		*$mark02*)
			echo -e "\e[32m I see $mark02 mark \e[92m \e[5m test OK ...keep going...\e[0m" | logline
#			zenity --info --title="page_probe keep going" --text="I see $mark02 \n \n OK, keep going..." --timeout 5
		;;
		*$mark03*)
			echo -e "\e[32m Content OK... \e[92m \e[5m test OK ...keep going...\e[0m" | logline
#			zenity --info --title="Looks good... \n\ page_probe... keep going" --text="ok, keep going..." --timeout 5
		;;
    *$mark04*)
			echo -e "\e[32m Content... \e[92m \e[5m Accept cookies...\e[0m" | logline
			xdotool key --delay $kd Ctrl+f && xdotool type $mark04 && xdotool key --delay $kd Escape
      sleep 1
      xdotool key Return
#			zenity --info --title="Looks good... \n\ page_probe... keep going" --text="ok, keep going..." --timeout 5
		;;
		*)
			echo -e "\e[35m Looks good... \e[92m \e[5m test OK ...keep going...\e[0m" | logline
#			zenity --info --title="Looks good... \n\ page_probe... keep going" --text="ok, keep going..." --timeout 5
		;;
		esac
}

press_keys_01 () {
#  set +x
  echofunc "${FUNCNAME[0]}"
  xdotool key --delay $kd_2 Down Down Down Page_Down Page_Up
  #key_repeat=40
  key_repeat=4
  echo -e '\e[92mkey_repeat = ' $key_repeat | logline
  echo -e "\e[0m"
  for (( key_step=1; key_step<$key_repeat; key_step++ )); do
    echoinfo "key_repeat=$key_repeat kd_1=$kd_1 kd_1_sec=$kd_1_sec Tab Escape"
    echoinfo "key:Tab"
    xdotool key --delay $kd_1 Tab
    echoinfo "key: Escape"
    xdotool key --delay $kd_1 Escape
    echoinfo "going to sleep: $kd_1_sec"
    sleep $kd_1_sec
    echoinfo "repeat..."
    shift 1
  done
}

press_keys_02 () {
  echofunc "${FUNCNAME[0]}"
  xdotool key --delay $kd_2 Down Escape Down Escape Down Escape Page_Down Escape Page_Up
  xdotool key --delay $kd_1 Down Escape Down Page_Down Escape Down Escape Down Escape Down Escape Page_Down Down Escape
  xdotool key --delay $kd_1 Down Escape Down Escape Page_Down Up Down Escape Down Escape Down Up Up Escape Down Escape
  xdotool key --delay $kd_1 Up Escape Up Escape Up Escape Up Escape Page_Up Escape
  xdotool key --delay 300 Ctrl+f
}

press_keys_03 () {
  echofunc "${FUNCNAME[0]}"
  xdotool key --delay $kd_1 Escape keydown Shift Tab keyup Shift Tab Escape
  xdotool key --delay $kd_2 Tab Escape Tab Escape Tab Escape Tab Escape Tab Escape Tab Escape Tab Escape
  xdotool key --delay $kd_1 Tab Escape Tab Escape Tab Escape Tab Escape Tab Escape Tab Escape Tab Escape
  xdotool key --delay $kdl Down Escape Down Escape Down Escape Down Escape Down Escape Down Escape Down
  xdotool key --delay $kd_2 Down Escape Down Escape Down Down Up Down Down Down Up Up Down Up Down Down Down Down Down Down
  xdotool key --delay $kdl Up Escape Up Escape Up Escape Up Up Down
  xdotool key --delay $kd_1 Up Up Up Down Up Up Up Up Down Down
  xdotool key --delay $kd_2 Up Escape Up Escape Up Escape Up Up Down
  xdotool key --delay $kdl Tab Escape Tab Escape Tab Tab Tab Tab Tab Tab Escape
}

press_keys_04 () {
#  set +x
  echofunc "${FUNCNAME[0]}"
  for (( key_step=1; key_step<$random; key_step++ )); do
          echoinfo "random=$random kd_2=$kd_2 kd_2_sec=$kd_2_sec Escape Tab"
          xdotool key --delay $kd_2 Escape
          xdotool key --delay $kd_2 Tab
          sleep $kd_2_sec
          shift 1
  done
}

press_enter_morning_and_afternoon_01 () {
  # Press Enter only between 8am and 11pm
  H=$(date +%k)
  if (( 9 <= $H && $H < 13 )); then
    echowarning "between 9AM and 1PM, hit enter..."
  	xdotool key --delay 500 Return
  elif (( 13 <= $H && $H < 22 )); then
    echowarning "between 1PM and 10PM, hit enter..."
  	xdotool key --delay 500 Return
    else
  	echoinfo "....go to bed"
  fi
  echoinfo '... ... ... ... ... ENTER only between 9am and 10pm'
}

walking_around_wall () {
  set +x
  echofunc "${FUNCNAME[0]}"
  echo "DISPLAY=$DISPLAY"
  # enter URL in browser and execute
  xdotool search --sync --onlyvisible --class "$PROC01" windowactivate
  transset -a 0.8 # set lighter window
  xdotool key --delay 500 Ctrl+l
  xdotool key --delay 100 Ctrl+a
  xdotool type --delay 100 $SPOT01url
  xdotool key --delay 100 Return
  transset -a 0.9 # set darker window
  sleep 3
  scrot_local # screenshot
  detect_input_field
  press_keys_01
  set -x
  # switch to english language
  switch_to_english
  press_keys_02
  press_keys_03
  press_keys_04
  press_enter_morning_and_afternoon_01

  xdotool search --sync --onlyvisible --class "$PROC01" windowactivate
  sleep 3
  		cd /tmp
  windows_uneeded_close
	echo -e "\e[32m ...... \e[92m \e[5m Start screen fb-chat-detect-activity...\e[0m" | logline
  fb_chat_detect_activity
  		/bin/bash /opt/busy4me/windows-check.sh
  		sleep 1
  		# start move mouse with python
  		echo -e '.. ... ... ... .... .... ... ..\e[35m\e[7m python start \e[0m ...'
  move_mouse_01
  page_probe
  windows_check
  xdotool key --delay $kd_2 Down Down Down Page_Down Page_Up Down Down Down
  windows_check
  xdotool key --delay $kd_1 Up Up Up Up Up Up Up Up
  windows_check
  xdotool key --delay $kd_2 Escape Escape
  xdotool key --delay $kd_1 Escape Escape
}

detect_input_field () {
  echofunc "${FUNCNAME[0]}"
  xclip -selection clipboard /opt/busy/files/blank
  xdotool key --delay $kd Home Shift+End
#	xdotool key --delay $kd Shift+F10
  xdotool key --delay $kd Ctrl+c
  clip=$(xclip -out -selection clipboard )
  case "$clip" in
    "https://")
    echo ".. this is address bar, escape from here"
    zenity --info --title="Address bar" --text=".. this is address bar, escape from here" --timeout 3
    xdotool key --delay $kd Tab Tab Tab Tab Tab
#    return
    ;;
    *)
    xdotool type --delay $kdl 'abc'
    xdotool key --delay $kdl Home Shift+End
    xdotool key --delay $kdl Ctrl+c
    clip2=$(xclip -out -selection clipboard )
      if [[ "$clip2" == "abc" ]]; then
        echo ".. this is input field, escape from here"
        zenity --info --title="Input field" --text=".. this input field, escape from here" --timeout 3
        xdotool key --delay $kds Tab Tab Tab
#        return
      fi
    ;;
  esac
}

switch_to_english () {
  echofunc "${FUNCNAME[0]}"
  xclip -selection clipboard /opt/busy/files/blank
  xdotool type --delay $kds 'English ('
  xdotool key --delay $kds Escape
  xdotool key --delay $kds Shift+End
  xdotool key --delay 100 Ctrl+c
  clip=$(xclip -out -selection clipboard )
  if [[ "$clip" == "English (US)" ]]; then
    echo "on position: English (US)"
    xdotool key --delay $kd Return
    sleep 1
    xclip -selection clipboard /opt/busy/files/blank
    hide_window
    clip=$(xclip -out -selection clipboard )
    case "$clip" in
      "english (us)?")
      xdotool key --delay $kds Tab Return
#      sleep 3
      ;;
      *)
      echo "already english"
      ;;
    esac
    zenity --info --title="Check language" --text="Check language..." --timeout 3
  fi
}

loop () {
  echofunc "${FUNCNAME[0]}"
  iter=100 #how many steps to do
  for (( step=1; step<$iter; step++ )); do
    declare -a _SPOTS=(
  #  "https://www.facebook.com/groups/"
    "https://www.facebook.com/games/instantgames/category/?category=400"
    "https://www.facebook.com/jobs"
    "https://www.facebook.com/gaming/feed/"
    "https://www.facebook.com/marketplace/"
    "https://www.facebook.com/watch/"
    "https://www.facebook.com/watch/shows/"
    "https://www.facebook.com/watch/live/"
    "https://www.facebook.com/pages/"
    "https://www.facebook.com/marketplace/groups/"
    "https://www.facebook.com/videos"
    "https://www.facebook.com/jobs"
    "https://www.facebook.com/offers/v2/wallet"
    )
    for SPOT01url in ${_SPOTS[@]}; do
      echofunc "${FUNCNAME[0]}"
      echo "$(( (i * 100) /$iter ))%"
      echo -e "\e[32m walking_around_wall... step: $step#$iter SPOT: $SPOT01url\e[0m" | logline
      echo -e '... ... ... ... ... \e[44m Start move mouse  \e[0m ...'
      echo -e "\e[32m ...... \e[92m \e[5m Start screen mouse-move-around...\e[0m" | logline
      screen -S mouse-move-around -X kill
      screen -S mouse-move-around$DISPLAY -X kill
      screen -dmS mouse-move-around$DISPLAY '/opt/busy4me/fb/mouse-move-around.py'
      echo -e '\e[35m\e[7m'
      screen -ls
      echo -e '\e[0m'
      kd_1=$((600 + RANDOM % 8 * 200)) # Key Delay between 600 and 2000[ms]
      kd_2=$((900 + RANDOM % 8 * 200)) # Key Delay between 900 and 2000[ms]
      kdl=$((1500 + RANDOM % 15 * 200)) # Key Delay Long between 1500 and 4000[ms]
      random=$((6 + RANDOM % 10)) # random number between 6 and 16
      kd_1_sec=`echo "scale=2;${kd_1}/1000" | bc`
      kd_2_sec=`echo "scale=2;${kd_2}/1000" | bc`
      walking_around_wall
      sleep 0.2
      shift 1
    done
done
}

loop
transset -a 0.9 # set lighter window

set +x

#done | zenity --progress --title="Walking around test..." --percentage=0 --no-cancel --auto-close
#(sleep 2 && wmctrl -F -a "Walking around test..." -b add,above) & loop
