#!/bin/bash
# slimming Linux bootstrap script, author: Roy Visar visaroy@gmail.com
# to set varaibles, slim distro, remove files, remove packages, install packages, , xorg, salt etc.
# set -o nounset # unset variables as an error
# # # #
#exec 3>&1 4>&2
#trap 'exec 2>&4 1>&3' 0 1 2 3
#exec 1>initiv.log 2>&1
# Everything below will go to the file 'log.out':
exec &> >(tee -ia initiv.log)
exec 2>&1

__start=$(date +%s) # calculate how long script runs (see on the end)
__script_path=`pwd`
__script_name="initiv"
__script_version="20.02"
__script_full_name="$0"
__script_arguments="$*"
__date_stamp="$(date +%Y-%m-%d--%H-%M-%S)"
__busyuser="vi" # default user
cd $HOME

# set bashcolors ===============================================================
if ! wget -q -nv -O ./bashcolors --no-check-certificate http://busy4.me/bashcolors; then
	echo -e "no colors...\e[0m"
else
. ./bashcolors
echo -e "${lblu}o${gre}o${cya}o${red}o${mag}o${yel}o${gre}o${lbla}o${lblu}o${gre}o${cya}o${red}o${mag}o${yel}o${whi}o\
${lbla} __script_arguments=$__script_arguments ${coloroff}"
fi

secs_to_human() {
    if [[ -z ${1} || ${1} -lt 60 ]] ;then
        min=0 ; secs="${1}"
    else
        time_mins=$(echo "scale=2; ${1}/60" | bc)
        min=$(echo ${time_mins} | cut -d'.' -f1)
        secs="0.$(echo ${time_mins} | cut -d'.' -f2)"
        secs=$(echo ${secs}*60|bc|awk '{print int($1+0.5)}')
    fi
    echo "Time Elapsed : ${min} minutes and ${secs} seconds."
}

# set echo types
echoerror() {
    printf "${lred} * ERROR${lred}: %s${nocolor}\\n" "$@" 1>&2;
}

echowarning() {
    printf "${lyel} * WARNING: %s ${nocolor}\\n" "$@" 1>&2;
}

echoinfo() {
    printf "${lblu}   * INFO${lcya}: %s ${nocolor}\\n" "$@" 1>&2;
}

echofunc() {
    printf "${lgre} * FUNCTION${gre}: %s${nocolor}\\n" "$@" 1>&2;
}

if [ $USER != "root" ]; then
	echoinfo "... ### run this script as root to get full functionality ### ..."
fi

__create_recovery () {
	echofunc "__create_recovery"
# create recovery script 'initiv-recovery', to be using in emergency case, eg.when update went wrong
echoinfo "__script_path: $__script_path/initivRecovery"
cat > $__script_path/initivRecovery  << EOF
#/bin/bash
rm ./initiv
cp ./initiv-* ./initiv
EOF
chmod +x ./initivRecovery
}
[[ -f ./initivRecovery ]] ||	{ echoinfo "create script initivRecovery ... "; __create_recovery; }

# reset (restart) Xserver (xinit) in tty1
__reset () {
echofunc "reset Xserver in tty1 ... wait"
	service getty@tty1 stop
	(sleep 2; service getty@tty1 restart) &
	echoinfo " ... done"
}

__add_to_path () {
#rm +x /tmp/initiv-temp.sh
#cat > /tmp/initiv-temp.sh << EOF
#!/bin/sh
#echo "export PATH=$PATH:/root"
#EOF
#chmod +x /tmp/initiv-temp.sh
	echo "PATH="$PATH
	case "$(echo $PATH)" in
	  *"/root"*)
		echoinfo "PATH contains: $__script_path"
	  ;;
	  *)
		echowarning "add to path ... "$__script_path
	  PATH=$PATH:/stratum; export PATH
		sed -i 's/export PATH=$PATH:\/root//g' ~/.profile
	  echo 'export PATH=$PATH:'$__script_path  >> ~/.profile
	  ;;
	esac

#	if [ $PATH != "*/root*" ]; then
#		echowarning "add to path ... "$__script_path
#		echo 'export PATH=$PATH:'$__script_path  >> ~/.bash_profile
#		echo 'export PATH=$PATH:'$__script_path  >> ~/.profile
#		eval /tmp/initiv-temp.sh
#		echo "PATH="$PATH
#	else
#		echoinfo "PATH contains:" $__script_path
#	fi
}

__add_to_path

__read_data () {
echofunc "__read_data"
# rm ./initivData
echo $__date_stamp " - disk usage:" $(df -H | grep -vE 'Filesystem|tmpfs|cdom' | grep /dev/ | awk '{ print $1 " " $3 }') >> ./initivData
__read_data=$(echo $__date_stamp " - disk usage:" $(df -H | grep -vE 'Filesystem|tmpfs|cdom'| grep /dev/ | awk '{ print $1 " " $3 }'))
# | tr '\n' ' '
echoinfo "read disk usage ..." | tr '\n' ' '; echo $__read_data
}

__update_apt_repos () {
	cp /etc/apt/sources.list /etc/apt/sources.list.bak; rm /etc/apt/sources.list
		#add main repo Debian 8 Jessie
		#echo 'deb http://ftp.debian.org/debian jessie main' >> /etc/apt/sources.list
#add main repo Debian 10 Buster
cat > /etc/apt/sources.list << EOF
deb http://deb.debian.org/debian buster main
#deb-src http://deb.debian.org/debian buster main
deb http://deb.debian.org/debian-security/ buster/updates main
#deb-src http://deb.debian.org/debian-security/ buster/updates main
deb http://deb.debian.org/debian buster-updates main
#deb-src http://deb.debian.org/debian buster-updates main
EOF
apt update
}

__install_stuff () {
	echofunc "__install_stuff"
	echoinfo " ... install stuff from Debian repositories ..."
[[ "$_PACKAGE" = "ssh" ]] &&	{ echoinfo "install openssh-server..  wait...."; apt-get install -y -qq --no-install-recommends openssh-server; exit 0; }

	declare -a stuff=(
	"openssh-server"
	"bc"
	"xloadimage"
	"xli"
	"xosd-bin"
	"parted"
	)
	for _PACKAGE in ${stuff[@]}; do
		echoinfo "install package: $_PACKAGE ............................. wait ..."
		apt-get install -y -qq --no-install-recommends $_PACKAGE
	done
}

__install_stuff2 () {
	echofunc "__install_stuff2"
	echoinfo " ... install stuff2 from Debian repositories ..."
# install stuff during "installation ..." message
# "software-properties-common" may be not needed
/usr/share/debconf/fix_db.pl # avoid problem with debconf corruption

declare -a stuff2=(
"curl"
"wget"
"openbox"
"xdotool"
"wmctrl"
"xcompmgr"
"feh"
"nginx"
"bc"
"ntp"
"zenity"
"xclip"
"ntpdate"
"scrot"
"screen"
"sqlite3"
"xvfb"
"tint2"
"dbus"
"ffmpeg"
"python"
"python-dev"
"python-tk"
"python-pip"
"python-xlib"
"python-pillow"
)
	for _PACKAGE in ${stuff2[@]}; do
		echoinfo "install package: $_PACKAGE ............................. wait ..."
		apt-get install -y -qq --no-install-recommends $_PACKAGE
	done
pip install setuptools -U # update 08-2019,
pip install pyautogui # need for automate keys, mouse, recognise pictures on the screen
}

__install_stuff3 () {
	echofunc "__install_stuff3"
	echoinfo " ... install stuff3 from other repositories ..."
	# needs to be installed before add google key below
	_PACKAGE="gnupg"
	echoinfo "install package: $_PACKAGE ............................. wait ..."
	apt-get install -y -qq --no-install-recommends $_PACKAGE
	wget --no-check-certificate -qO- https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
	#add-apt-repository 'deb http://dl.google.com/linux/chrome/deb/ stable main'
	_GGL_REPO="deb http://dl.google.com/linux/chrome/deb/ stable main"
	_SRC_FILE="/etc/apt/sources.list"
	if grep -x -q "$_GGL_REPO" $_SRC_FILE; then
			echoinfo "$_GGL_REPO exists..."
		else
			echo $_GGL_REPO >> $_SRC_FILE
	fi
	apt update
	_PACKAGE="google-chrome-stable"
	echoinfo "install package: $_PACKAGE ............................. wait ..."
	apt-get install -y -qq --no-install-recommends $_PACKAGE
}

__parted () {
	echofunc "__parted"
[[ -z $_DEV ]] && _DEV=/dev/sda
[[ -z $_PART ]] && _PART=1
[[ -z $_APPLY ]] && _APPLY=apply
echoinfo "_DEV=$_DEV; _PART=$_PART; _APPLY=$_APPLY"
_USAGE="eg. preview usage: initiv parted /dev/sda 1; apply usage: initiv parted /dev/sda 1 apply"
if [ -z "$_DEV" ]; then
	echowarning "_DEV and _PART are empty... "; echoinfo "$_USAGE"; exit 0
fi
if [ -z "$_PART" ]; then
	echowarning "_PART is empty... "; echoinfo "$_USAGE"; exit 0
fi
fdisk -l $_DEV$_PART >> /dev/null 2>&1 || (echo "could not find $_DEV$_PART - please check" && exit 1)

CURRENTSIZEB=`fdisk -l $_DEV$_PART | grep "Disk $_DEV$_PART" | cut -d' ' -f5`
CURRENTSIZE=`expr $CURRENTSIZEB / 1024 / 1024`
MAXSIZEMB="10000MB" # max size 10GB
#MAXSIZEMB=`printf %s\\n 'unit MB print list' | parted | grep "Disk ${_DEV}" | cut -d' ' -f3 | tr -d MB`
echowarning "[ok] would/will resize to from ${CURRENTSIZE}MB to ${MAXSIZEMB}"

if [[ "$_APPLY" == "apply" ]] ; then
  echo "[ok] applying resize operation.."
  parted ${_DEV} resizepart ${_PART} yes ${MAXSIZEMB}
  echoinfo "[done]"
else
  echowarning "Sandbox mode, i did not size!. $_USAGE"
fi
(sleep 2; echoinfo "expand filesystem ........... please wait ...") &
resize2fs $_DEV$_PART
}

# Autologin as $__busyuser user without login manager in console tty1...
__autologin_set () {
echofunc "__autologin_set"
# autologin as $busyuser in tty1
#
if [ "$_AUTOUSER" != "" ]; then
		__busyuser=$_AUTOUSER
fi
echo -e "\e[32m Autologin as $__busyuser user without login manager in console tty1...\e[0m"
mkdir -pv /etc/systemd/system/getty@tty1.service.d 2>/dev/null
rm /etc/systemd/system/getty@tty1.service.d/autologin.conf 2>/dev/null
cat > /etc/systemd/system/getty@tty1.service.d/autologin.conf << EOF
[Service]
ExecStart=
ExecStart=-/sbin/agetty --autologin $__busyuser --noclear %I $TERM
EOF

# autologin as root in tty2
#
mkdir -pv /etc/systemd/system/getty@tty2.service.d 2>/dev/null
rm /etc/systemd/system/getty@tty2.service.d/autologin.conf 2>/dev/null
cat > /etc/systemd/system/getty@tty2.service.d/autologin.conf << EOF
[Service]
ExecStart=
ExecStart=-/sbin/agetty --autologin root --noclear %I $TERM
EOF
systemctl set-default multi-user.target
}

__autostart_set () {
	echofunc "__autostart_set"
rm /home/vi/.profile
# startx without messages:
# [[ $(tty) = /dev/tty1 ]] && setterm -blank 0 -powersave off && startx -- vt1 &> /dev/null
cat > /home/vi/.profile  << 'EOF'
[[ $(tty) = /dev/tty1 ]] && setterm -blank 0 -powersave off && startx
EOF
chown vi:vi /home/vi/.profile
systemctl set-default multi-user.target
}

__tunning () {
	echofunc "__tunning"
	choinfo "modify /etc/ssh/sshd_config: PermitRootLogin yes"
	sed -i 's/without-password/yes/g' /etc/ssh/sshd_config # deb8
	sed -i 's/\#PermitRootLogin\ prohibit-password/PermitRootLogin\ yes/g' /etc/ssh/sshd_config #deb10
	service sshd reload
		echoinfo " ... set /etc/apt/apt.conf: Install-Recommends \"false\""
		rm /etc/apt/apt.conf 2>/dev/null
	echo 'APT::Install-Recommends "false" ; APT::Install-Suggests "false" ;' >> /etc/apt/apt.conf
		echoinfo " ... configure grub .............."
	sed -i 's/GRUB_TIMEOUT=5/GRUB_TIMEOUT=0/g' /etc/default/grub 2>/dev/null
	sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT="quiet"/GRUB_CMDLINE_LINUX_DEFAULT="quiet vga=current loglevel=0 splash rd.udev.log_priority=3 rd.systemd.show_status=false"/g' /etc/default/grub 2>/dev/null
	update-grub 2>/dev/null
		echoinfo " ... do not show messages durring boot ........ disable blank console ..."
	sed -i 's/exit 0//g' /etc/rc.local 2>/dev/null
	printf '%s\n%s\n' 'dmesg --console-off' 'exit 0' >> /etc/rc.local
	sed -i 's/#kernel.printk/kernel.printk/g' /etc/sysctl.conf
	if [ -e /etc/default/rcS ];then
		echoinfo " ... modify /etc/default/rcS ..."
		sed -i 's/#VERBOSE/VERBOSE/g' /etc/default/rcS
	else
		echoinfo " ... create /etc/default/rcS file with VERBOSE=no ..."
		touch /etc/default/rcS
		echo 'VERBOSE=no' >> /etc/default/rcS
	fi
	sed -i 's/journal+console/journal/g' /lib/systemd/system/systemd-fsck-root.service
	sed -i 's/journal+console/journal/g' /lib/systemd/system/systemd-fsck@.service
}

__remove_dirs () {
	echofunc "__remove_dirs"
	echoinfo "remove directories ..."
	if [ $_DIR == "NULL" ]; then
		echoerror "nothing to remove ... add argument please"
	exit 0
	fi
	echowarning "remove $_DIR"
	rm -R $_DIR 2>/dev/null
}

__remove_files () {
	echofunc "__remove_files"
	echoinfo "rm /var/cache/apt/*.bin"
rm /var/cache/apt/*.bin 2>/dev/null
	echoinfo "rm /var/cache/debconf/*"
rm /var/cache/debconf/* 2>/dev/null
	echoinfo "rm /var/cache/apt/archives/*.deb"
rm /var/cache/apt/archives/*.deb 2>/dev/null
	echoinfo "rm /var/lib/apt/lists/*.*"
rm /var/lib/apt/lists/*.* 2>/dev/null
	echoinfo "rm -rf /usr/share/man/??"
rm -rf /usr/share/man/?? && rm -rf /usr/share/man/??_*
# rm -rf /usr/lib/modules/4.19.0-8-amd64/kernel/sound/pci/*
# remove all modules, linux starts fine after that :)
}

__download_files () {
# download file "package.tar.gz" and unpack to "archive" directory in declared "/full/path/package"
# help = usage ========================
# ./initiv -d /full/path/package.tar.gz
# all files from package.tar.gz will be extracted to "/full/path/package" directory
#	__file=$__file
	echofunc "__download_files"
	# server structure /.initiv/debian/10.3/x86_64/
	_SERVER="http://busy4.me"
	if [ -f /etc/os-release ]; then
	. /etc/os-release
		_ID=$ID
		_VERSION_CODENAME=$VERSION_CODENAME
		_VERSION_ID=$VERSION_ID
	fi
	if [ -f /etc/debian_version ]; then
		_VER=$(cat /etc/debian_version)
	fi
	_ARCH=$(uname -m)
	_KERNEL_RELEASE="$(uname -r)"
	echoinfo "full server distribution path: $_SERVER/.initiv/$_ID/$_VER/$_ARCH"

# help = usage ============================
# ./initiv download
# will download all files from declared default list
# declare list of full names of files with full paths
if [ -z "$__file" ]; then
	echoinfo "declare list of files ......... wait ..."
	declare -a __files=(
#	"/usr/lib/modules/$_KERNEL_RELEASE.tar.gz" \
	"/usr/share/pixmaps/spin.tar.gz"\
	"/usr/share/pixmaps/dots-mouse/dots-mouse.tar.gz"\
	"/usr/share/pixmaps/red-dots-black/red-dots-black.tar.gz"\
	)
else
	echoinfo "full file name with path $__file"
	__f=$(echo "${__file##*/}") # extract file name without path
	__p=$(echo "${__file%/*}") # extract path only
	echoinfo "file: $__f"
	echoinfo "path: $__p"
	echoinfo "download file: $__p/$__f ............................. wait ..."
	rm -R $__p # delete old package files and directory
	mkdir $__p
	wget -nv -O $__file --no-check-certificate $_SERVER/.initiv/$_ID/$_VER/$_ARCH/$__path/$__file
	tar -C $__p -zxf $__file
	rm -R $__file # clean up
	echoinfo "tar -C $__p -zxvf $__file"; echoinfo "... done"
fi
# __filex=$(echo $__file | sed 's/.*\//') # extract file without path
# __file_path=$(echo $__file | sed 's/$__filex//g') # extract path only, not working with variable
# easy way:
# __file=$(echo "${__file##*/}") # extract file name without path
# __path=$(echo "${__file%/*}") # extract path only
# source: https://stackoverflow.com/questions/4168371/how-can-i-remove-all-text-after-a-character-in-bash
# create archive
# tar -zcvf spin.tar.gz ./spin
# tar -zcvf $_KERNEL_RELEASE.tar.gz /usr/lib/modules/$_KERNEL_RELEASE
# download file:
	for __file in ${__files[@]}; do
		__f=$(echo "${__file##*/}") # extract file name without path
		__p=$(echo "${__file%/*}") # extract path only
		echoinfo "file: $__f"
		echoinfo "path: $__p"
		echoinfo "download file: $__file ............................. wait ..."
		rm -R $__p # delete old package files and directory
		mkdir $__p
		wget -nv -O $__file --no-check-certificate $_SERVER/.initiv/$_ID/$_VER/$_ARCH/$__path/$__file
		tar -C $__p -zxf $__file
		rm -R $__file # clean up
		echoinfo "tar -C $__p -zxvf $__file"; echoinfo "... done"
		done
	# unpack archive
}

__anime () {
	echofunc "__anime"
if [ -z "$_ANIMEDIR" ]; then
	_ANIMEDIR="/usr/share/pixmaps/red-dots-black"
else
	case $_ANIMEDIR in
		"1"|"dark") _ANIMEDIR="/usr/share/pixmaps/red-dots-black"                                              ;;
		"2"|"light") _ANIMEDIR="/usr/share/pixmaps/dots-mouse"                                                  ;;
		"3"|"spin") _ANIMEDIR="/usr/share/pixmaps/spin"                                                        ;;
		*) echowarning "usage: $0 anime [1|dark|2|light|3|spin]"; exit 0           ;;
	esac
fi
# xli based on xloadimage
# pictures default directory
echoinfo "_ANIMEDIR:$_ANIMEDIR"
rm /opt/anime.sh
cat > /opt/anime.sh << EOF
#!/bin/bash
echo "_ANIMEDIR:$_ANIMEDIR"
_ANIMEDIR='\$_ANIMEDIR'
__anime () {
it="0.1" # interval time
__dirlist=(`ls $_ANIMEDIR/\$*`)
while true; do
	for __file in \${__dirlist[*]}; do
#		export DISPLAY=:0 && eval xloadimage -onroot $_ANIMEDIR/\$__file &
		xloadimage -onroot $_ANIMEDIR/\$__file &
		sleep \$it
	done
	pkill xloadimage
done
}
case \$1 in
	\$1)
		_ANIMEDIR=\$1
		__anime
	;;
	*)
		echo "no arguments"
	;;
esac
EOF
chmod +x /opt/anime.sh

#eval /opt/anime.sh
#bash -c "exec -a ProcessName xview /usr/share/pixmaps/spin/spin11.gif &"
# set user's autostart, xinitrc
cp /home/$__busyuser/.xinitrc /home/$__busyuser/.xinitrc.bak 2>/dev/null
rm /home/$__busyuser/.xinitrc 2>/dev/null
cat > /home/$__busyuser/.xinitrc  << 'EOF'
#xclock
/opt/anime.sh &
(sleep 2; /opt/xt.sh) &
/opt/osd.sh
EOF
chown $__busyuser:$__busyuser /home/$__busyuser/.xinitrc
# echo "/opt/animation.sh &" >> /home/$__busyuser/.xinitrc
# eval /opt/animation.sh
# export XAUTHORITY="/home/$__busyuser/.Xauthority" && export DISPLAY=:0 && bash /opt/animation.sh &
}

__osd () {
	echofunc "__osd"
_FC=orange # font color

if [[ "$_THEME" = "light" ]]; then
	_FC=blue
fi
#rm $HOME/osd
#cat > /opt/osd << 'EOF'
#Loading . . .
#EOF
__it="0.5"
# help==============================
# see fonts list, command: xlsfonts
# default font:
#__fo="-misc-fixed-medium-r-semicondensed--*-*-*-*-c-*-*-*"
rm /opt/osd.sh
cat > /opt/osd.sh << EOF
#!/bin/bash
__fo="-misc-fixed-bold-r-normal--18-120-100-100-c-90-iso8859-1"
	touch \$HOME/osd
		while true; do
			declare -a __dots=("." ".." "...")
			for __dot in \${__dots[@]}; do
				__r=\$((RANDOM%2+1)) # random 1 digit
				echo "installing \$__dot" 2>&1 | tee \$HOME/osd
				/usr/bin/osd_cat -p bottom -o 1 -A center -c $_FC -d \$__r -f \$__fo \$HOME/osd
			done
		done
EOF
chmod +x /opt/osd.sh
echoinfo "/opt/osd.sh ... created"
}

__xt () {
echofunc "__xt"
_BG=black
_FG=grey

if [[ "$_THEME" = "light" ]]; then
	_BG=white;	_FG=black
fi
# run xterm with scpecific parameters
cat > /opt/xt.sh << EOF
#!/bin/bash
__count () {
	# generate specific output in terminal
	__ms=\$((10 * 100000))
	echo -e -n "\x1b[\x36 q" # change cursor to steady bar
	while true; do
		__c=\$(( __c+1 ))
		echo -ne " \$__ms \033[0K\r \$__c "
		sleep 0.01
		: \$(( __ms-- ))
	done
}

__ip () {
	# generate IP output in terminal
	_IP=\$(ip -4 addr | grep -oP '(?<=inet\s)\d+(\.\d+){3}' | sed 's/127.0.0.1//' | tr '\n' ' ')
	while [[ "\$_IP" = "" ]]; do
		_IP=\$(ip -4 addr | grep -oP '(?<=inet\s)\d+(\.\d+){3}' | sed 's/127.0.0.1//' | tr '\n' ' ')
	sleep 1
	done
	echo "\$_IP" | tr '\n' ' '
	sleep infinity
}

__xterm () {
	__font="-misc-fixed-bold-r-normal--18-120-100-100-c-90-iso8859-1"
	# xterm -geometry 30x20+0+0 -uc -bg black -fg grey -fn \$__font -e /opt/count.sh
	xterm -geometry 50x3+10+10 -bw 0 -uc -bg $_BG -fg $_FG -fn \$__font -e '/opt/xt.sh count' &
	xterm -geometry 17x2+650+545 -bw 0 -uc -bg $_BG -fg $_FG -fn \$__font -e '/opt/xt.sh ip'
}

case \$1 in
	count) __count ;;
	ip) __ip       ;;
	*) __xterm     ;;
esac
EOF
chmod +x /opt/xt.sh
echoinfo "/opt/xt.sh ... created"
}

__remove_packages () {
	echofunc "__remove_packages"
# I did try remove: "ispell", but sometimes :/ needs interactive answer, hmmm
	declare -a _PACKAGES=(
	"acpi"
	"acpid"
	"eject"
	"gcc-4.8-base:amd64"
	"os-prober"
	"laptop-detect"
	"manpages"
	"nano"
	"tasksel"
	"traceroute"
	"usbutils"
	"vim-common"
	"vim-tiny"
	"console-setup"
	"discover"
	"installation-report"
	"xxd"
	"kbd"
	"keyboard-configuration"
	"libc-l10n"
	"pciutils"
	"apparmor"
	)
		for _PACKAGE in ${_PACKAGES[@]}; do
			echoinfo "remove package: $_PACKAGE ............................. wait ..."
			apt-get -qq purge $_PACKAGE
		done
	apt-get -qq autoremove
	apt-get clean
}

__new_hostname () {
	echofunc "__hostname"
	echoinfo "change hostname to \"$_NEW_HOSTNAME\""
}

__update () {
	echofunc "__update"
	echoinfo " ..check update"
	echo -e "$0 \e[32m -- Update $__script_version $__date_stamp\e[0m"
	if ! wget -nv -O ./initiv.new --no-check-certificate http://busy4.me/initiv; then
		echoerror "there is no file "$0" on the server or no response!..."
		exit 1
	else
	rm -rf ./initiv-*;	cp ./initiv ./initiv-$__date_stamp # backup just in case
	rm -rf ./initiv;	cp ./initiv.new ./initiv 2>/dev/null
	chmod +x ./initiv
	rm -rf ./initiv.new
	echoinfo " Update end"
fi
}

__salt () {
	echofunc "__saltstack"
	echoinfo " ... install saltstack, _SALT_MASTER_ADDRESS="$_SALT_MASTER_ADDRESS" "
}

__no_option () {
	echofunc "__no_option"
	echo -e "${lred}Option does not exist :${lyel} -$OPTARG, ${coloroff} type $0 -h for help"
}

__debfoster () {
	echofunc "__no_option"
	echoinfo "remove packages using debfoster"
	apt -y install debfoster
	debfoster -q
}

__install_x () {
	echofunc "__install_x"
	echoinfo "install X"
apt-get install -y -V --no-install-recommends xorg
cp /home/$__busyuser/.profile /home/$__busyuser/.profile.bak 2>/dev/null
rm /home/$__busyuser/.profile 2>/dev/null
cat > /home/$__busyuser/.profile  << 'EOF'
[[ $(tty) = /dev/tty1 ]] && setterm -blank 0 -powersave off && startx -- vt1 &> /dev/null
EOF
chown $__busyuser:$__busyuser /home/$__busyuser/.profile

cp /home/$__busyuser/.xinitrc /home/$__busyuser/.xinitrc.bak 2>/dev/null
rm /home/$__busyuser/.xinitrc 2>/dev/null
cat > /home/$__busyuser/.xinitrc  << 'EOF'
xclock
EOF
chown $__busyuser:$__busyuser /home/$__busyuser/.xinitrc
}

__interface () {
	echofunc "__interface"
	echoinfo "set interface ..."
picture="wallpaper.jpg"
	rm /opt/$picture
	wget -nv -O /opt/$picture --no-check-certificate http://busy4.me/$picture
chmod 777 /opt/$picture
}

__help() {
	echoinfo "=== $__script_name === Ver.$__script_version ======== help =============="
	cat << EOT

  Usage :  $__script_name [-options] [VARIABLE=value] <action>

  Options:
    -a  Set user autologin in tty1 console
    -b  option "b"
    -c  option "c"
    -d  option "d"
    -e  option "e"
    -f  option "f"
    -g  option "g"
    -h  Display this message
		-n  Set background animation. -n light or -n dark (default)
    -v  Display script version
    -T  change hostname
    -A  Pass the salt-master DNS name or IP. This will be stored under
        \${BS_SALT_ETC_DIR}/minion.d/99-master-address.conf
    -i  Pass the salt-minion id. This will be stored under
        \${BS_SALT_ETC_DIR}/minion_id
    -o  Option "o"
    -p  Option "p"
    -r  Option "r"
    -s  Option "s"
    -t  Pass the loading theme. -t light or -t dark
    -u  Update $0
    -w  Option "w"

		Variables:
    salt-master=<IP> Pass salt-master IP or DNS name.

  Actions:
	salt - install salt minion
  remove_files - remove unneded files
	remove_packages - remove packages
	tunning
EOT
echo -e "\e[32m  =================== help file end ==============\e[0m"
}   # ----------  end of function __help  ----------

__version() {
echo -e "\e[95m$0 -- Version $__script_version\e[0m"
}

# options ======================================================================
# ==============================================================================
# ==============================================================================
while getopts ':a: d: h i: n: o: r: v T: t: u w x' opt
do
  case "${opt}" in
    a )  _AUTOUSER="$OPTARG"; __autologin_set; __autostart_set            ;;
		d )  __file="$OPTARG"; __download_files; exit 0                       ;;
    h )  __help; exit 0                                                   ;;
		i )  _PACKAGE="$OPTARG"; __install_stuff                              ;;
		n )  _ANIMEDIR="$OPTARG"; echoinfo "_ANIMEDIR=$OPTARG"                ;;
		o )  _THEME="$OPTARG"; __osd                                          ;;
		r )  _DIR="$OPTARG"; __remove_dirs; exit 0                            ;;
    v )  __version                                                        ;;
    T )  _NEW_HOSTNAME="$OPTARG"; __new_hostname                          ;;
		t )  _THEME="$OPTARG"; _ANIMEDIR="$OPTARG"; __anime; __xt;            ;;
		u )  __update; __version                                              ;;
		w )  __update_apt_repos                                               ;;
		x )  __install_x; (sleep 2; __reset) &                                ;;
		:) echowarning "Option -$OPTARG requires an argument." >&2        		;;
		\?) __no_option                                                       ;;
		* )  __help; exit 0                                                   ;;
  esac
done
shift $((OPTIND-1))

for i in "$1"; do
	case $i in
		sm=*|salt-master=*) _SALT_MASTER_ADDRESS="${i#*=}"; shift            ;;
		hs=*|hostname=*) _NEW_HOSTNAME="${i#*=}"; shift                      ;;
	esac
done
#shift $((OPTIND-1))

case $1 in
	"update" )	__update                                                   ;;
	"updateApt"|"apt" )	__update_apt_repos                                 ;;
	"removeFiles"|"remove-files" )	__remove_files                         ;;
	"removePackages"|"remove-packages" )	__remove_packages                ;;
	"autostart"|"autostartSet"|"autostart-set" )	__autostart_set          ;;
	"autologin"|"autologinSet"|"autologin-set" )	__autologin_set          ;;
	"installStuff"|"install-stuff"|"apt" )	__install_stuff                ;;
	"tunning" )	__tunning                                                  ;;
	"installStuff2"|"install-stuff2"|"apt2" )	__install_stuff2             ;;
	"installStuff3"|"install-stuff3"|"apt3" )	__install_stuff3             ;;
	"salt" ) __salt                                                        ;;
	"installX"|"install-x" )	__install_x                                  ;;
	"interface" )	__interface                                              ;;
	"download" )	__download_files                                         ;;
	"spin"|"animation"|"anime" )	_ANIMEDIR="$2"; __anime                  ;;
	"osd" )	__osd                                                          ;;
	"reset" )	__reset                                                      ;;
	"xt" )	__xt                                                           ;;
	"createRecovery"|"create-recovery" )	__create_recovery                ;;
	"parted" )	_DEV=$2; _PART=$3; _APPLY=$4; __parted                     ;;
	"all"|"full"|"install" )
		__read_data
		__update
		__update_apt_repos
		__remove_packages
		__autostart_set
		__autologin_set
		__install_stuff
		__tunning
		__salt
		__install_x
		__interface
		__download_files
		__anime
		__osd
		__xt
		(sleep 2; __reset) &
		;;

esac
__read_data
echo -e $coloroff
secs_to_human "$(($(date +%s) - ${__start}))"
exit 0
