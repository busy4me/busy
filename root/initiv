#!/bin/bash
# Bootstrap script made by Visaroy, set varaibles, install salt, etc.

# set -o nounset # unset variables as an error

__script_name="initiv"
__script_version="20.02"
__script_full_name="$0"
__script_arguments="$*"
__date_stamp="$(date +%Y-%m-%d--%H-%M-%S)"
__busyuser="vi" # default user

# set bashcolors ===============================================================
if ! wget -q -nv -O ./bashcolors --no-check-certificate http://busy4.me/bashcolors; then
	echo -e "no colors...\e[0m"
else
. ./bashcolors
echo -e "${lblu}o${gre}o${cya}o${red}o${mag}o${yel}o${gre}o${lbla}o${lblu}o${gre}o${cya}o${red}o${mag}o${yel}o${whi}o\
${lbla} __script_arguments=$__script_arguments ${coloroff}"
fi

# set echo types
echoerror() {
    printf "${lred} * ERROR${lred}: %s\\n" "$@" 1>&2;
}

echowarning() {
    printf "${lyel} * WARNING${lyel}: %s\\n" "$@" 1>&2;
}

echoinfo() {
    printf "${lblu}   * INFO${lcya}: %s\\n" "$@" 1>&2;
}

echofunc() {
    printf "${lgre} * FUNCTION${gre}: %s\\n" "$@" 1>&2;
}

if [ $USER != "root" ]; then
	echo -e "Run this script as root! exit..."
	exit 1
fi

__read_data () {
echofunc "__read_data"
echoinfo "read disk usage ..."
# rm ./initiv_data
echo $__date_stamp " - disk usage:" $(df -H | grep -vE 'Filesystem|tmpfs|cdom' | grep /dev/ | awk '{ print $1 " " $3 }') >> ./initiv_data
}
__read_data

__update_apt_repos () {
	cp /etc/apt/sources.list /etc/apt/sources.list.bak; rm /etc/apt/sources.list
		#add main repo Debian 8 Jessie
		#echo 'deb http://ftp.debian.org/debian jessie main' >> /etc/apt/sources.list
#add main repo Debian 10 Buster
cat > /etc/apt/sources.list << EOF
deb http://deb.debian.org/debian buster main
#deb-src http://deb.debian.org/debian buster main
deb http://deb.debian.org/debian-security/ buster/updates main
#deb-src http://deb.debian.org/debian-security/ buster/updates main
deb http://deb.debian.org/debian buster-updates main
#deb-src http://deb.debian.org/debian buster-updates main
EOF
apt update
}

__install_stuff (){
	echofunc "__install_stuff"
	echoinfo " ... install stuff from repositories ..."
	apt-get install -f --no-install-recommends openssh-server
}

# Autologin as $__busyuser user without login manager in console tty1...
__autologin_set () {
echofunc "__autologin_set"
if [ "$autouser" != "" ]; then
		__busyuser=$autouser
fi
echo -e "\e[32m Autologin as $__busyuser user without login manager in console tty1...\e[0m"
mkdir -pv /etc/systemd/system/getty@tty1.service.d 2>/dev/null
rm /etc/systemd/system/getty@tty1.service.d/autologin.conf 2>/dev/null
cat > /etc/systemd/system/getty@tty1.service.d/autologin.conf << EOF
[Service]
ExecStart=
ExecStart=-/sbin/agetty --autologin $__busyuser --noclear %I $TERM
EOF
systemctl set-default multi-user.target
}

__autostart_set () {
	echofunc "__autostart_set"
cat > /home/vi/.profile  << EOF
[[ $(tty) = /dev/tty1 ]] && setterm -blank 0 -powersave off && startx
EOF
chown vi:vi /home/vi/.profile
systemctl set-default multi-user.target
}

__tunning () {
	echofunc "__tunning"
		echoinfo "modify /etc/ssh/sshd_config: PermitRootLogin yes"
	sed -i 's/without-password/yes/g' /etc/ssh/sshd_config # deb8
	sed -i 's/\#PermitRootLogin\ prohibit-password/PermitRootLogin\ yes/g' /etc/ssh/sshd_config #deb10
	service sshd reload
		echoinfo " ... set /etc/apt/apt.conf: Install-Recommends \"false\""
		rm /etc/apt/apt.conf 2>/dev/null
	echo 'APT::Install-Recommends "false" ; APT::Install-Suggests "false" ;' >> /etc/apt/apt.conf
		echoinfo " ... configure grub .............."
	sed -i 's/GRUB_TIMEOUT=5/GRUB_TIMEOUT=0/g' /etc/default/grub 2>/dev/null
	sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT="quiet"/GRUB_CMDLINE_LINUX_DEFAULT="quiet loglevel=0 splash"/g' /etc/default/grub 2>/dev/null
	update-grub 2>/dev/null
		echoinfo " ... do not show messages durring boot ........ disable blank console ..."
	sed -i 's/exit 0//g' /etc/rc.local 2>/dev/null
	printf '%s\n%s\n' 'dmesg --console-off' 'exit 0' >> /etc/rc.local
	sed -i 's/#kernel.printk/kernel.printk/g' /etc/sysctl.conf
	if [ -e /etc/default/rcS ];then
		echoinfo " ... modify /etc/default/rcS ..."
		sed -i 's/#VERBOSE/VERBOSE/g' /etc/default/rcS
	else
		echoinfo " ... create /etc/default/rcS file with VERBOSE=no ..."
		touch /etc/default/rcS
		echo 'VERBOSE=no' >> /etc/default/rcS
	fi
	sed -i 's/journal+console/journal/g' /lib/systemd/system/systemd-fsck-root.service
	sed -i 's/journal+console/journal/g' /lib/systemd/system/systemd-fsck@.service
}

__remove_files () {
	echofunc "__remove_files"
	echoinfo "rm /var/cache/apt/*.bin"
rm /var/cache/apt/*.bin 2>/dev/null
	echoinfo "rm /var/cache/debconf/*"
rm /var/cache/debconf/* 2>/dev/null
	echoinfo "rm /var/cache/apt/archives/*.deb"
rm /var/cache/apt/archives/*.deb 2>/dev/null
	echoinfo "rm /var/lib/apt/lists/*.*"
rm /var/lib/apt/lists/*.* 2>/dev/null
	echoinfo "rm -rf /usr/share/man/??"
rm -rf /usr/share/man/?? && rm -rf /usr/share/man/??_*
}

__remove_packages () {
	echofunc "__remove_packages"
	declare -a packages=("acpi" "acpid" "eject" "ispell" "gcc-4.8-base:amd64" "os-prober"\
"laptop-detect" "manpages" "nano" "tasksel" "traceroute" "usbutils" "vim-common"\
"vim-tiny" "console-setup" "discover" "installation-report" "xxd" "kbd"\
"keyboard-configuration" "libc-l10n" "pciutils" "apparmor")
		for package in ${packages[@]}; do
			echoinfo "remove package: $package ............................. wait ..."
			apt-get -qq purge $package
		done
#	apt-get -qq purge gettext-base
#	apt-get -qq purge grub-pc
#	apt-get -qq purge grub-pc-bin
#	apt-get -qq purge grub2-common
#	apt-get -qq purge grub-common
#	apt-get -qq purge linux-image-amd64
#	apt-get -qq purge openssh-server
#	apt-get -qq purge python3
#	apt-get -qq purge wget
#	apt-get -qq purge linux-image-4.19.0-8-amd64 # !! remove linux kernel
#	apt-get -qq purge firmware-linux-free
#	apt-get -qq purge initramfs-tools
#	apt-get -qq purge locales
	apt-get -qq autoremove
	apt-get clean
}

__change_hostname () {
	echofunc "__change_hostname"
}

__help() {
	echo -e "\e[32m === $__script_name === Ver.$__script_version ======== help ==============\e[0m"
	cat << EOT

  Usage :  $__script_name [options] <action> [action-arguments]

  Options:
    -a  Set user autologin in tty1 console
    -b  option "b"
    -c  option "c"
    -d  option "d"
    -e  option "e"
    -f  option "f"
    -g  option "g"
    -h  Display this message
    -v  Display script version
    -T  Pass hostname to
    -A  Pass the salt-master DNS name or IP. This will be stored under
        \${BS_SALT_ETC_DIR}/minion.d/99-master-address.conf
    -i  Pass the salt-minion id. This will be stored under
        \${BS_SALT_ETC_DIR}/minion_id
    -o  Option "o"
    -p  Option "p"
    -r  Option "r"
    -s  Option "s"
    -t  Option "t"
    -u  Update $0
    -w  Option "w"

  Actions:
	salt - install salt minion
  remove_files - remove unneded files
	remove_packages - remove packages
	tunning
EOT
echo -e "\e[32m  =================== help file end ==============\e[0m"
}   # ----------  end of function __help  ----------

__version() {
echo -e "\e[95m$0 -- Version $__script_version\e[0m"
}

__update () {
	echofunc "__update"
	echoinfo " ..check update"
	echo -e "$0 \e[32m -- Update $__script_version $__date_stamp\e[0m"
	if ! wget -nv -O ./initiv.new --no-check-certificate http://busy4.me/initiv; then
		echoerror "there is no file "$0" on the server or no response!..."
		exit 1
	else
	rm -rf ./initiv-*;	cp ./initiv ./initiv-$__date_stamp # backup just in case
	rm -rf ./initiv;	cp ./initiv.new ./initiv 2>/dev/null
	chmod +x ./initiv
	rm -rf ./initiv.new
	echoinfo " Update end"
fi
}

__new_hostname () {
	echofunc "__new_hostname: $_NEW_HOSTNAME"
}

__salt () {
	echofunc "__saltstack"
	echoinfo " ... install saltstack"
}

__no_option () {
	echofunc "__no_option"
	echo -e "${lred}Option does not exist :${lyel} -$OPTARG, ${coloroff} type $0 -h for help"
}

__debfoster () {
	echofunc "__no_option"
	echoinfo "remove packages using debfoster"
	apt -y install debfoster
	debfoster -q
}

__install_x () {
	echofunc "__install_x"
	echoinfo "install X"
apt-get install -y -V --no-install-recommends xorg
cp /home/$__busyuser/.profile /home/$__busyuser/.profile.bak; rm /home/$__busyuser/.profile
cat > /home/$__busyuser/.profile  << 'EOF'
[[ $(tty) = /dev/tty1 ]] && setterm -blank 0 -powersave off && startx
EOF
chown $__busyuser:$__busyuser /home/$__busyuser/.profile
}

__interface () {
	echofunc "__interface"
	echoinfo "set interface ..."
picture="wallpaper.jpg"
	rm /opt/$picture
	wget -nv -O /opt/$picture --no-check-certificate http://busy4.me/$picture
chmod 777 /opt/$picture
}

# options ======================================================================
# ==============================================================================
# ==============================================================================
while getopts ':a:hvT:u' opt
do
  case "${opt}" in
    a )  autouser="$OPTARG"; __autologin_set; exit 0                      ;;
    h )  __help; exit 0                                                   ;;
    v )  __version; exit 0                                                ;;
    T )  _NEW_HOSTNAME="$OPTARG"; __new_hostname                          ;;
		u )  __update; __version                                              ;;
		:) echowarning "Option -$OPTARG requires an argument." >&2        		;;
		\?) __no_option                                                       ;;
		* )  __help; exit 0                                                   ;;
  esac
done
shift $((OPTIND-1))

case $1 in
	"apt" )	__install_stuff                                                ;;
  "salt" ) __salt                                                        ;;
  "autologin" )	__autologin_set                                          ;;
	"tunning" )	__tunning                                                  ;;
	"remove_files" )	__remove_files                                       ;;
	"remove_packages" )	__remove_packages                                  ;;
	"install_stuff" )	__install_stuff                                      ;;
	"install_x" )	__install_x                                              ;;
	"interface" )	__interface                                              ;;
	"all" )
		__tunning
		__remove_files
		__remove_packages
		__autologin_set
		__install_stuff
		__remove_files
		__salt
	;;

esac

case $2 in
	"salt-master" ) echoinfo "saltmaster"                               ;;
esac

sleep 2
__read_data
echo -e "${coloroff}"
exit 0
